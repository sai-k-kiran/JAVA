Equals and hashCode contract in Java:

- If two objects are equal by equals() method then there hashcode must be same.
- If two objects are not equal by equals() method then there hashcode could be same or different.

Steps to override equals() method:
    - Do "this" check.
    - Do "null" check.
    - Use "getClass()" instead of "instanceof" to check if objects are of same type. instanceof method returns true for subclasses too so avoid that.
    - Check individual atributes. First check the interger fields coz comparing numeric atributes are fast & uses short circuit operator for combining checks.
    - Always override hashCode() if equals() is being overriden
    - While overriding hashCode makes sure you use all fields which have been used in equals method

    @Override
    public boolean equals(Object obj) {    // LINE 1 
        if (obj == this) return true;      // if reference of current object & obj is same
        
        if (obj == null || obj.getClass() != this.getClass()) return false;

        Person guest = (Person) obj;
        return id == guest.id
                    && (firstName != null && firstName.equals(guest.getFirstName()))   // Or simply Objects.equals(name, guest.getName());
                    && (lastName != null && lastName .equals(guest.getLastName()));
    }

LINE 1 - Always use the "Object" type as an argument to the equals method. Dont use "Person" or another specific type. If you put this object in an ArrayList and call
contains() (which then class equals() for checking), then it will be unable to detect the object. 

	List list = new ArrayList();   // OR List<Person> list = new ArrayList<>();
	list.add(new Person("b", 2));

	Person p = new Person("b", 2);
	System.out.println(list.contains(p));  // false, if argument at LINE 1 was Person type & no @Override

By using @Override annotation, it will detect this error in compile time, we get error: method does not override or implement a method from a supertype

String and Wrapper classes like Integer, Float and Double override equals method but StringBuffer doesnâ€™t override it.

equals() method should follow rules:
    - Reflexive: Object must be equal to itself.
    - Symmetric : if a.equals(b) is true then b.equals(a) must be true.
    - Transitive : if a.equals(b) is true and b.equals(c) is true then c.equals(a) must be true.
    - comparing any object to "null" must be false and should not result in NullPointerException

Using "instanceof" could break the second rule if we are comparing parent & child class. If parent.equals(child) is true then child.equals(parent) must be true,
but it isnt.

One  example where equals method is not consistent with compareTo is java.math.BigDecimal class. If you compare two BigDecimal object e.g. 120.0 and 120.00, equals 
method will return false, while compareTo will return 0. Both are inconsistent, because equals take both scale and value in consideration, while compareTo method 
only consider values. 

-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

equals() method in Hibernate:
- We should never decide equality just based upon identifier.  Since Hibernate only assign identifier values to the object that are persistent, a newly created 
instance will not have any identifier value. Always use an immutable/final key of the persistent object like emp.id etc. 

- Implement equals() and hashCode() using real word key that would identify instance in real world.

- Dont use getClass() to compare object equality because Hibernate uses proxy and this check will always fail. Instead, use instanceof operator, it respect proxy 
because they have IS-A relationship with the actual object.

- Use getter and setter methods to access properties instead of directly accessing these, because hibernate lazily initialize object, when the getProperty() method 
is called. Using name may return null but getName() may return value from database.

-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

Overriding hashCode():
    - Take a prime hash e.g. 5, 7, 17 or 31 (prime number as hash, results in distinct hashcode for distinct object)
    - Take another prime as multiplier different than hash.
    - Compute hashcode for each member and add them into final hash.

    @Override
    public int hashCode() {   // return type should be int only
        int hash = 5, prime = 31
        hash = prime *  hash + (this.name != null ? this.name.hashCode() : 0);
        hash = prime *  hash + (int) (this.id ^ (this.id >>> 32));
        hash = prime *  hash + this.age;
        return hash;
    }

The calculation of hashcode is based on 32-bit internal JVM address of the Object.

-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

GENERICS:
Generic in Java is added to provide compile-time type-safety of code and removing the risk of ClassCastException at runtime. Ex: Set of Strings must contain Strings,
if an Integer is added then compiler will highlight using curly underlines.

    public class Box {
        private Object object;

        public void set(Object object) { this.object = object; }
        public Object get() { return object; }
    }

Since its methods accept or return an Object, you are free to pass in whatever you want, provided that it is not one of the primitive types. There is no way to verify, 
at compile time, how the class is used. One part of code may place an Integer & expect Integer. Another part may place a String & gets runtime error.

To update the Box class to use generics, you create a generic type declaration:

    public class Box<T> {    // all occurrences of Object are replaced by T. T = raw type
        private T t;

        public void set(T t) { this.t = t; }
        public T get() { return t; }
    }

The older API classes(before JDK 5.0), generics were not available so many codebases has legacy codes. We can account for backward compatibility by:

    Box<Integer> box = new Box<>();  // parametrized type
    Box rawBox = new Box();          // raw type of Box<T>, rawBox = box is fine but box = rawBox is wrong

Using old(non-generic) code can give warnings : Example.java uses unchecked or unsafe operations. The term "unchecked" means that the compiler does not have enough type 
information to perform all type checks necessary to ensure type safety. The "unchecked" warning is disabled, by default, though the compiler gives a hint. To see all 
"unchecked" warnings, recompile with -Xlint:unchecked.

To completely disable unchecked warnings, use the -Xlint:-unchecked flag. The @SuppressWarnings("unchecked") annotation suppresses unchecked warnings.

Generic methods are methods that introduce their own type parameters. This is similar to declaring a generic type, but the type parameters scope is limited to the 
method where it is declared.

    public class Util {
        public static <K, V> boolean compare(Pair<K, V> p1, Pair<K, V> p2) {
            return p1.getKey().equals(p2.getKey()) &&
                p1.getValue().equals(p2.getValue());
        }
    }

-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

BOUNDED TYPE PARAMETERS:
There may be times when you want to restrict the types that can be used as type arguments in a parameterized type. For ex, a method that operates on numbers might only 
want to accept instances of Number or its subclasses. This is what bounded type parameters are for.
To declare a bounded type parameter, list the type parameters name, followed by the extends keyword, followed by its upper bound.

    public <U extends Number> void inspect(U u){       // U can be of any type which is a Number or its subtype(Double, Integer)
        System.out.println("U: " + u.getClass().getName());
    }

    class D <T extends A & B & C> {   // multiple bounds
        //....
    }

Generic Methods and Bounded Type Parameters:
    public static <T> int countGreaterThan(T[] anArray, T elem) {
        int count = 0;
        for (T e : anArray)
            if (e > elem) count++;    // compiler error

        return count;
    }

The above program doesnt compile because ">" operator works with only to primitive types such as short, int, double, long, float, byte, and char. so

    public static <T extends Comparable<T>> int countGreaterThan(T[] anArray, T elem) {
        int count = 0;
        for (T e : anArray)
            if (e.compareTo(elem) > 0) count++;
        return count;
    }

    Box<Number> box = new Box<>();
    box.add(new Integer(1));   // OK
    box.add(new Double(2));    // OK

Given 2 concrete types A and B, MyClass<A> has no relationship to MyClass<B>, regardless of whether or not A and B are related.

    public void boxTest(Box<Number> n) { /* ... */ }    // you cant pass Box<Integer> to this method even if Box<U extends Number>

    public void boxTest(Collection<String> list) { /* ... */ }  // you can pass List<String>, ArrayList<String> coz these 2 are subtype of Collection

interface PayloadList<E,P> extends List<E> {  // P type is optional value, ew can set it to any type. Only E should be constant
  void setPayload(int index, P val);
  ...
}

    PayloadList<String, String>, PayloadList<String, Integer>, PayloadList<String, Exception>

-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

TYPE INFERENCE:
Type inference is a Java compilers ability to look at each method invocation and corresponding declaration to determine the type argument (or arguments) that make the 
invocation applicable. The inference algorithm determines the types of the arguments and, if available, the type that the result is being assigned.
Finally, the inference algorithm tries to find the most specific type that works with all of the arguments.

    static <T> T pick(T a1, T a2) { return a2; }   
    Serializable s = pick("d", new ArrayList<String>());      // returns 2nd arg, that means 2nd argument here is of Type Serializable  

    public class BoxDemo {
        public static <U> void addBox(U u, List<Box<U>> boxes) {
            Box<U> box = new Box<>();
            box.set(u);
            boxes.add(box);
        }
    }

    BoxDemo.<Integer>addBox(Integer.valueOf(10), listOfIntegerBoxes);   //   BoxDemo.<Integer>addBox() this syntax becoz addBox is a static method.
    BoxDemo.addBox(Integer.valueOf(20), listOfIntegerBoxes);  // no type(<Integer>). But the arg Integer.valueOf(10) is read by inference algo & type is set to Integer

You can replace the type args required to invoke the constructor of a generic class with an empty set of type params as long as the compiler can infer the type args.

    Map<String, String> myMap = new HashMap<String, String>();      -->   Map<String, String> myMap = new HashMap<>();

Note that to take advantage of type inference during generic class instantiation, you must use the diamond. In the following example, the compiler generates an 
unchecked conversion warning because the HashMap() constructor refers to the HashMap raw type, not the Map<String, String> type:

    Map<String, String> myMap = new HashMap(); // unchecked conversion warning

It is important to note that the inference algorithm uses only invocation arguments, target types, and possibly an obvious expected return type to infer types. 
The inference algorithm does not use results from later in the program. 

Constructors can also be generic. Type inference for a constructor works exactly same as for method
    class MyClass<X> {
        <T> MyClass(T t) {
            // ...
        }
    }

    MyClass<Integer> obj = new MyClass<>(" ") 
The compiler infers the type "Integer" for  X of the generic class MyClass<X>. It infers the type "String" for T of the constructor of this generic class.

The Java compiler takes advantage of target typing to infer the type parameters of a generic method invocation. The target type of an expression is the data type 
that the Java compiler expects depending on where the expression appears.

    static <T> List<T> emptyList();
    List<String> listOne = Collections.emptyList();  //  expecting an instance of List<String>; this data type is the target type

Because the method emptyList() returns a value of type List<T>, the compiler infers that the type argument T must be the value String. Alternatively, you could 
use a type witness and specify the value of T as follows:

    List<String> listOne = Collections.<String>emptyList(); 

For Java SE 7, following code will generate an error:
    void processStringList(List<String> stringList) {
        // process stringList
    }
    processStringList(Collections.emptyList());    // error : List<Object> cannot be converted to List<String>

The compiler requires a value for the type argument T so it starts with the value Object. Consequently, the invocation of Collections.emptyList returns a value of type 
List<Object>, which is incompatible with the method processStringList. Thus, in Java SE 7, you must specify the value of the value of the type argument as follows:

    processStringList(Collections.<String>emptyList());