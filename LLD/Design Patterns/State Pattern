State is a behavioral design pattern that lets an object alter its behavior when its internal state changes. It appears as if the object changed its class.

The State pattern is closely related to the concept of a Finite-State Machine.

The main idea is that, at any given moment, there’s a finite number of states which a program can be in. Within any unique state, the program behaves differently, 
and the program can be switched from one state to another instantaneously. However, depending on a current state, the program may or may not switch to certain other 
states. These switching rules, called transitions, are also finite and predetermined.

State machines are usually implemented with lots of conditional statements (if or switch) that select the appropriate behavior depending on the current state of the 
object. Usually, this “state” is just a set of values of the object’s fields.

The biggest weakness of a state machine is that it becomes difficult when many number of conditional statements are added to the class.
Code like this is very difficult to maintain because any change to the transition logic may require changing state conditionals in every method.

The State pattern suggests that you create new classes for all possible states of an object and extract all state-specific behaviors into these classes.

Instead of implementing all behaviors on its own, the original object, called context, stores a reference to one of the state objects that represents its current state, 
and delegates all the state-related work to that object.

To transition the context(original object) into another state, replace the active state object with another object that represents that new state. This is possible only 
if all state classes follow the same interface and the context itself works with these objects through that interface.

This structure may look similar to the Strategy pattern, but there’s one key difference. In the State pattern, the particular states may be aware of each other and 
initiate transitions from one state to another, whereas strategies almost never know about each other.

1. Context stores a reference to one of the concrete state objects and delegates to it all state-specific work. The context communicates with the state object via the 
state interface. The context exposes a setter for passing it a new state object.

2. The State interface declares the state-specific methods. These methods should make sense for all concrete states because you don’t want some of your states to have 
useless methods that will never be called.

3. Concrete States provide their own implementations for the state-specific methods. To avoid duplication of similar code across multiple states, you may provide 
intermediate abstract classes that encapsulate some common behavior.

State objects may store a backreference to the context object. Through this reference, the state can fetch any required info from the context object, as well as 
initiate state transitions.

4. Both context and concrete states can set the next state of the context and perform the actual state transition by replacing the state object linked to the context.
-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

REAL WORLD ANALOGY:

In this example, the State pattern lets the same media player controls behave differently, depending on the current playback state. The main class of the player 
contains a reference to a state object, which performs most of the work for the player. Some actions may end-up replacing the state object with another, which 
changes the way the player reacts to the user interactions.

public abstract class State {               -->     Common state interface 
    @Player player;

    State(Player player) {
        this.player = player;
    }

    public abstract String onLock();
    public abstract String onPlay();
    public abstract String onNext();
    public abstract String onPrevious();
}

public class LockedState extends State{           -->      Locked state of player
    LockedState(Player player) {
        super(player);
        player.setPlaying(false);
    }

    public String onLock() {
        if (player.isPlaying()) {
            player.changeState(new ReadyState(player));
            return "Stop playing";
        } else {
            return "Locked...";
        }
    }

    public String onPlay() {
        player.changeState(new ReadyState(player));
        return "Ready";
    }

    public String onNext() {
        return "Locked...";
    }

    public String onPrevious() {
        return "Locked...";
    }
}

public class ReadyState extends State {             --> Ready state

    public ReadyState(Player player) {
        super(player);
    }

    public String onLock() {
        player.changeState(new LockedState(player));
        return "Locked...";
    }
    public String onPlay() {
        String action = player.startPlayback();
        player.changeState(new PlayingState(player));
        return action;
    }

    public String onNext() {
        return "Locked...";
    }

    public String onPrevious() {
        return "Locked...";
    }
}

public class PlayingState extends State {       -->     Playing state of player
    PlayingState(Player player) {
        super(player);
    }

    public String onLock() {
        player.changeState(new LockedState(player));
        player.setCurrentTrackAfterStop();
        return "Stop playing";
    }

    public String onPlay() {
        player.changeState(new ReadyState(player));
        return "Paused...";
    }

    public String onNext() {
        return player.nextTrack();
    }

    public String onPrevious() {
        return player.previousTrack();
    }
}

public class Player {
    private State state;
    private boolean playing = false;
    private List<String> playlist = new ArrayList<>();
    private int currentTrack = 0;

    public Player() {
        this.state = new ReadyState(this);
        setPlaying(true);
        for (int i = 1; i <= 12; i++) {
            playlist.add("Track " + i);
        }
    }

    public void changeState(State state) {
        this.state = state;
    }

    public State getState() {
        return state;
    }

    public void setPlaying(boolean playing) {
        this.playing = playing;
    }

    public boolean isPlaying() {
        return playing;
    }

    public String startPlayback() {
        return "Playing " + playlist.get(currentTrack);
    }

    public String nextTrack() {
        currentTrack++;
        if (currentTrack > playlist.size() - 1) {
            currentTrack = 0;
        }
        return "Playing " + playlist.get(currentTrack);
    }

    public String previousTrack() {
        currentTrack--;
        if (currentTrack < 0) {
            currentTrack = playlist.size() - 1;
        }
        return "Playing " + playlist.get(currentTrack);
    }

    public void setCurrentTrackAfterStop() {
        this.currentTrack = 0;
    }
}

public class UI {
    private Player player;
    private static JTextField textField = new JTextField();

    public UI(Player player) {
        this.player = player;
    }

    public void init() {

        JButton play = new JButton("Play");
        play.addActionListener(e -> textField.setText(player.getState().onPlay()));

        JButton stop = new JButton("Stop");
        stop.addActionListener(e -> textField.setText(player.getState().onLock()));

        JButton next = new JButton("Next");
        next.addActionListener(e -> textField.setText(player.getState().onNext()));

        JButton prev = new JButton("Prev");
        prev.addActionListener(e -> textField.setText(player.getState().onPrevious()));
    }
}

public class Demo {
    public static void main(String[] args) {
        Player player = new Player();
        UI ui = new UI(player);
        ui.init();
    }
}
-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

APPLICABILITY:

- Use the State pattern when you have an object that behaves differently depending on its current state, the number of states is enormous, and the state-specific code 
changes frequently.

The pattern suggests that you extract all state-specific code into a set of distinct classes. As a result, you can add new states or change existing ones independently 
of each other, reducing the maintenance cost.

- Use the pattern when you have a class polluted with massive conditionals that alter how the class behaves according to the current values of the class’s fields.

The State pattern lets you extract branches of these conditionals into methods of corresponding state classes. While doing so, you can also clean temporary fields and 
helper methods involved in state-specific code out of your main class.

- Use State when you have a lot of duplicate code across similar states and transitions of a condition-based state machine.

The State pattern lets you compose hierarchies of state classes and reduce duplication by extracting common code into abstract base classes.

HOW TO IMPLEMENT:

1. Decide what class will act as the context. It could be an existing class which already has the state-dependent code; or a new class, if the state-specific code is 
distributed across multiple classes.

2. Declare the state interface. Declare only state-specific methods (methods that changes the state of the object) in interface.

3. For every state the original object(context), create separate class that derives from state interface. Then extract all the state related code into the
specific state class.

While moving the code to the state class, you might discover that it depends on private members of the context. There are several workarounds:

    - Make these fields or methods public.
    - Turn the behavior you’re extracting, into a public method in the context and call it from the state class. 
    - Nest the state classes into the context class, but only if your programming language supports nesting classes.

4. In the context class, add a reference field of the state interface type and a public setter that allows overriding the value of that field.

5. Go over the method of the context again and replace empty state conditionals with calls to corresponding methods of the state object.

6. To switch the state of the context, create an instance of one of the state classes and pass it to the context. You can do this within the context itself, or in 
various states, or in the client. Wherever this is done, the class becomes dependent on the concrete state class that it instantiates.
-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

RELATIONS WITH OTHER PATTERNS:
- Bridge, State, Strategy (and to some degree Adapter) have very similar structures. Indeed, all of these patterns are based on composition, which is delegating work 
to other objects. However, they all solve different problems. A pattern isn’t just a recipe for structuring your code in a specific way. It can also communicate to 
other developers the problem the pattern solves.

- State can be considered as an extension of Strategy. Both patterns are based on composition: they change the behavior of the context by delegating some work to 
helper objects. Strategy makes these objects completely independent and unaware of each other. However, State doesn’t restrict dependencies between concrete states, 
letting them alter the state of the context at will.

NOTE: THESE 2 POINTS ARE ALSO IN STRATEGY PATTERN