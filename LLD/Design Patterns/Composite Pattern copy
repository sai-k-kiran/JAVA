Composite is a structural design pattern that lets you compose objects into tree structures and then work with these structures as if they were individual objects.

Using the Composite pattern makes sense only when the core model of your app can be represented as a tree.
For example, imagine that you have two types of objects: Products and Boxes. A Box can contain several Products as well as a number of smaller Boxes. These little 
Boxes can also hold some Products or even smaller Boxes, and so on.

Say you decide to create an ordering system that uses these classes. Orders could contain simple products without any wrapping, as well as boxes stuffed with 
products... and other boxes. How would you determine the total price of such an order?

You could try the direct approach: unwrap all the boxes, go over all the products and then calculate the total. That would be doable in the real world; but in 
a program, it’s not as simple as running a loop. You have to know the classes of Products and Boxes you’re going through, the nesting level of the boxes and 
other nasty details beforehand. All of this makes the direct approach either too awkward or even impossible.

The Composite pattern suggests that you work with Products and Boxes through a common interface which declares a method for calculating the total price.

How would this method work? For a product, it’d simply return the product’s price. For a box, it’d go over each item the box contains, ask its price and then 
return a total for this box. If one of these items were a smaller box, that box would also start going over its contents and so on, until the prices of all 
inner components were calculated. A box could even add some extra cost to the final price, such as packaging cost.

The greatest benefit of this approach is that you don’t need to care about the concrete classes of objects that compose the tree. You don’t need to know whether 
an object is a simple product or a sophisticated box. You can treat them all the same via the common interface. When you call a method, the objects themselves pass 
the request down the tree.

1. The Component interface describes operations that are common to both simple and complex elements of the tree.

2. The Leaf is a basic element of a tree that doesn’t have sub-elements.
Usually, leaf components end up doing most of the real work, since they don’t have anyone to delegate the work to.

3. The Container (aka composite) is an element that has sub-elements: leaves or other containers. A container doesn’t know the concrete classes of its children. 
It works with all sub-elements only via the component interface.

Upon receiving a request, a container delegates the work to its sub-elements, processes intermediate results and then returns the final result to the client.

4. The Client works with all elements through the component interface. As a result, the client can work in the same way with both simple or complex elements of the tree

-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

public interface Component{      // The base interface
    public void showPrice();     // This method can be used by both composite objects & leaf
}

public class Leaf implements Component{
    String name;
    Double price;

    public Leaf(String name,double price){
        this.name = name;
        this.price = price;
    }

    @Override
    public void showPrice() {
        System.out.println(this.price);
    }
}

public class Composite implements Component{
    String name;
    List<Component> components;

    public Composite(String name){
        this.name = name;
        components = new ArrayList<>();
    }

    @Override
    public void showPrice(){
        for (Component c : components){       // You can also implement this function recursively (DFS)
            c.showPrice();
        }
    }

    public void add(Component subComponent){
        components.add(subComponent);
    }
}

public static void main(String[] args){
    Component hdd       = new Leaf("hdd" , 4000);
    Component keyboard  = new Leaf("keyboard",1000);
    Component mouse     = new Leaf("mouse",500);
    Component ram       = new Leaf("ram",3000);
    Component processor = new Leaf("Processor",10000);

    Composite computer = new Composite("computer");

    Composite motherboard = new Composite("motherboard");
    motherboard.add(ram);
    motherboard.add(processor);

    Composite cabinet  = new Composite("cabinet");
    cabinet.add(hdd);
    cabinet.add(motherboard);

    Composite peripherals     = new Composite("peripherals");
    peripherals.add(keyboard);
    peripherals.add(mouse);

    computer.add(cabinet);
    computer.add(peripherals);

    computer.showPrice();
}

-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

APPLICABILTY:

- Use the Composite pattern when you have to implement a tree-like object structure.

The Composite pattern provides you with two basic element types that share a common interface: simple leaves and complex containers. A container can be 
composed of both leaves and other containers. This lets you construct a nested recursive object structure that resembles a tree.

- Use the pattern when you want the client code to treat both simple and complex elements uniformly.

All elements defined by the Composite pattern share a common interface. Using this interface, the client doesn’t have to worry about the concrete class of 
the objects it works with.

HOW TO IMPLEMENT:

1. Make sure that the core model of your app can be represented as a tree structure. Try to break it down into simple elements and containers. Remember that 
containers must be able to contain both simple elements and other containers.

2. Declare the component interface with a list of methods that make sense for both simple and complex components.

3. Create a leaf class to represent simple elements. A program may have multiple different leaf classes.

4. Create a container class to represent complex elements. In this class, provide an array field for storing references to sub-elements. The array must be able 
to store both leaves and containers, so make sure it’s declared with the component interface type.

    While implementing the methods of the component interface, remember that a container is supposed to be delegating most of the work to sub-elements.

5. Finally, define the methods for adding and removal of child elements in the container.

Keep in mind that these operations can be declared in the component interface. This would violate the Interface Segregation Principle because the methods will be 
empty in the leaf class. However, the client will be able to treat all the elements equally, even when composing the tree.

-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

RELATIONS WITH OTHER PATTERNS:

- You can use Builder when creating complex Composite trees because you can program its construction steps to work recursively.

- Chain of Responsibility is often used in conjunction with Composite. In this case, when a leaf component gets a request, it may pass it through the chain 
of all of the parent components down to the root of the object tree.

- You can use Iterators to traverse Composite trees.

- You can use Visitor to execute an operation over an entire Composite tree.

- You can implement shared leaf nodes of the Composite tree as Flyweights to save some RAM.

- Composite and Decorator have similar structure diagrams since both rely on recursive composition to organize an open-ended number of objects.

- Designs that make heavy use of Composite and Decorator can often benefit from using Prototype. Applying the pattern lets you clone complex structures instead of 
re-constructing them from scratch.