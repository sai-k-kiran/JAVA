Command is a behavioral design pattern that turns a request into a stand-alone object that contains all information about the request. This transformation 
lets you pass requests as a method arguments, delay or queue a request’s execution, and support undoable operations.

Imagine you are building buttons for a text editor. There are many classes and methods were these buttons can be called & used. In each class & method, 
the same button acts differently. We cant write codes for every button in each class. 

Good software design is often based on the principle of separation of concerns, which usually results in breaking an app into layers. The most common example: 
a layer for the graphical user interface and another layer for the business logic.

In the code it might look like this: a GUI object calls a method of a business logic object, passing it some arguments. This process is usually described as 
one object sending another a request.

The Command pattern suggests that GUI objects shouldn’t send these requests directly. Instead, you should extract all of the request details, such as the 
object being called, the name of the method and the list of arguments into a separate command class with a single method that triggers this request.

Command objects serve as links between various GUI and business logic objects. From now on, the GUI object doesn’t need to know what business logic object 
will receive the request and how it’ll be processed. The GUI object just triggers the command, which handles all the details.

1. The Sender class (aka invoker) is responsible for initiating requests. This class must have a field for storing a reference to a command object. The sender 
triggers that command instead of sending the request directly to the receiver. Note that the sender isn’t responsible for creating the command object. Usually, 
it gets a pre-created command from the client via the constructor.

2. The Command interface usually declares just a single method for executing the command.

3. Parameters required to execute a method on a receiving object can be declared as fields in the concrete command. You can make command objects immutable by 
only allowing the initialization of these fields via the constructor.

4. The Receiver class contains some business logic. Almost any object may act as a receiver. Most commands only handle the details of how a request is passed to 
the receiver, while the receiver itself does the actual work.

5. The Client creates and configures concrete command objects. The client must pass all of the request parameters, including a receiver instance, into the command’s 
constructor. After that, the resulting command may be associated with one or multiple senders.

-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

public interface Command{
    public void execute();
}

public class ONcommand implements Command{            // concrete command
    private TV tv;                                    // receiver object

    public ONcommand(TV tv){
        this.tv = tv;
    }

    public void execute(){
        this.tv.turnOn();
    }
}

public class OFFcommand implements Command{          // concrete command
    private TV tv;                                   // receiver object

    public OFFcommand(TV tv){
        this.tv = tv;
    }

    public void execute(){
        this.tv.turnOff();
    }
}

public class TV{        // Receiver (Executor) class
    public TV{
    // constructor
    }

    public void turnOn(){
        System.out.println("turning on the tv");
    }

    public void turnOff(){
        System.out.println("turning off the tv");
    }
}

public class Remote{        // Controller class
    Command command;

    public Remote{
        // constructor
    }

    public void setCommand(Command command){
        this.command = command;
    }

    public void pressButton(){
        this.command.execute();
    }
}

public class Main{             // Invoker class
    public static void main(String[] args){
        TV tv = new TV;                   // receiver (executor)
        Remote remote = new Remote();     // controller

        Command tvON = new ONcommand(tv);
        Command tvOFF = new OFFcommand(tv);

        remote.setCommand(tvOn);
        remote.pressButton();

        remote.setCommand(tvOFF);
        remote.pressButton();
    }
}
-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

APPLICABILITY:

- Use the Command pattern when you want to parameterize objects with operations.

The Command pattern can turn a specific method call into a stand-alone object. This change opens up a lot of interesting uses: you can pass commands as method 
arguments, store them inside other objects, switch linked commands at runtime, etc.

- Use the Command pattern when you want to queue operations, schedule their execution, or execute them remotely.

As with any other object, a command can be serialized, which means converting it to a string that can be easily written to a file or a database. Later, the 
string can be restored as the initial command object. Thus, you can delay and schedule command execution. In the same way, you can queue, log or send commands 
over the network.

- Use the Command pattern when you want to implement reversible operations.

Although there are many ways to implement undo/redo, the Command pattern is perhaps the most popular of all.

To be able to revert operations, you need to implement the history of performed operations. The command history is a stack that contains all executed command 
objects along with related backups of the application’s state.

This method has two drawbacks. First, it isn’t that easy to save an application’s state because some of it can be private. This problem can be mitigated with 
the Memento pattern.

HOW TO IMPLEMENT:

1. Declare the command interface with a single execution method.   // Command inteface in our example

2. Start extracting requests into concrete command classes that implement the command interface. Each class must have a set of fields for storing the request 
arguments along with a reference to the actual receiver object. All these values must be initialized via the command’s constructor.

3. Identify classes that will act as senders. Add the fields for storing commands into these classes. Senders should communicate with their commands only via 
the command interface. Senders usually don’t create command objects on their own, but rather get them from the client code.

4. Change the senders so they execute the command instead of sending a request to the receiver directly.

5. The client should initialize objects in the following order:

    Create receivers.                                                  // TV
    Create commands, and associate them with receivers if needed.      // Oncommand, OFFcommand
    Create senders, and associate them with specific commands.         // Remote
-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

RELATIONS WITH OTHER PATTERNS:

- Chain of Responsibility, Command, Mediator and Observer address various ways of connecting senders and receivers of requests:

    - Chain of Responsibility passes a request sequentially along a dynamic chain of potential receivers until one of them handles it.
    - Command establishes unidirectional connections between senders and receivers.
    - Mediator eliminates direct connections between senders and receivers, forcing them to communicate indirectly via a mediator object.
    - Observer lets receivers dynamically subscribe to and unsubscribe from receiving requests.

- Handlers in Chain of Responsibility can be implemented as Commands. In this case, you can execute a lot of different operations over the same context object, 
represented by a request.

However, there’s another approach, where the request itself is a Command object. In this case, you can execute the same operation in a series of different contexts 
linked into a chain.

- You can use Command and Memento together when implementing “undo”. In this case, commands are responsible for performing various operations over a target object, 
while mementos save the state of that object just before a command gets executed.

- Command and Strategy may look similar because you can use both to parameterize an object with some action. However, they have very different intents.

    You can use Command to convert any operation into an object. The operation’s parameters become fields of that object. The conversion lets you defer execution 
    of the operation, queue it, store the history of commands, send commands to remote services, etc.

    On the other hand, Strategy usually describes different ways of doing the same thing, letting you swap these algorithms within a single context class.

- Prototype can help when you need to save copies of Commands into history.

- You can treat Visitor as a powerful version of the Command pattern. Its objects can execute operations over various objects of different classes.