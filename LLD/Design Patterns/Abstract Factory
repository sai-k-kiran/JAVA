Abstract Factory is a creational design pattern that lets you produce families of related objects without specifying their concrete classes.

Imagine You have an app for furniture. The app contains different types of furnitures like sofa, chair & coffee table. There are several variants for these 
furnitures like modern sofa, victorian sofa, electric chair, wooden chair etc. SO we have to code such that we can accomodate our new product accordingly.

The first thing the Abstract Factory pattern suggests is to explicitly declare interfaces for each distinct product of the product family 
(e.g. chair, sofa or coffee table). Then you can make all variants of products follow those interfaces. For example, all chair variants can implement the 
Chair interface; all coffee table variants can implement the CoffeeTable interface, and so on.

The next move is to declare the Abstract Factory, an interface with a list of creation methods for all products that are part of the product family 
(for example, createChair, createSofa and createCoffeeTable). These methods must return abstract/general product types represented by the interfaces we extracted 
previously: Chair, Sofa, CoffeeTable and so on.

For each variant of a product family, we create a separate factory class based on the AbstractFactory interface. A factory is a class that returns products of a 
particular kind. For example, the ModernFurnitureFactory can only create ModernChair, ModernSofa and ModernCoffeeTable objects.

The client code has to work with both factories and products via their respective abstract interfaces. This lets you change the type of a factory that you pass 
to the client code, as well as the product variant that the client code receives, without breaking the actual client code.

Say the client wants a factory to produce a chair. The client doesn’t have to be aware of the factory’s class, nor does it matter what kind of chair it gets. 
Whether it’s a Modern model or a Victorian-style chair, the client must treat all chairs in the same manner, using the abstract Chair interface. With this 
approach, the only thing that the client knows about the chair is that it implements the "sitOn()" method in some way. Also, whichever variant of the chair is 
returned, it’ll always match the type of sofa or coffee table produced by the same factory object.

There’s one more thing left to clarify: if the client is only exposed to the abstract interfaces, what creates the actual factory objects? Usually, the application 
creates a concrete factory object at the initialization stage. Just before that, the app must select the factory type depending on the configuration or the environment 
settings.

1. Abstract Products declares interfaces for a set of distinct but related products which make up a product family.

2. Concrete Products are various implementations of abstract products, grouped by variants. Each abstract product (chair/sofa) must be implemented in all 
given variants (Victorian/Modern).

3. The Abstract Factory interface declares a set of methods for creating each of the abstract products.

4. Concrete Factories implement creation methods of the abstract factory. Each concrete factory corresponds to a specific variant of products and creates only those 
product variants.

5.  Although concrete factories instantiate concrete products, signatures of their creation methods must return corresponding abstract products. This way the client code that uses a factory doesn’t get coupled to the specific variant of the product it gets from a factory. The Client can work with any concrete factory/product variant, as long as it communicates with their objects via abstract interfaces.
-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

public interface Company {    -->   Abstract Factory
    Button createPhone();
    Checkbox createLaptop();
}

public interface Phone {             // abstract product  
    void paint(); 
}

public interface Laptop {           // abstract product  
    void paint();
}

public class ApplePhone implements Phone {           // concrete product  
    @Override
    public void paint() {
        System.out.println("You have created Apple Phone.");
    }
}

public class WindowsPhone implements Phone {          // concrete product  
    @Override
    public void paint() {
        System.out.println("You have created Windows Phone.");
    }
}

public class WindowsLaptop implements Laptop {          // concrete product  
    @Override
    public void paint() {
        System.out.println("You have created Windows Laptop.");
    }
}

public class AppleLaptop implements Laptop {              // concrete product  
    @Override
    public void paint() {
        System.out.println("You have created Apple Laptop.");
    }
}

public class AppleCompany implements Company {           // concrete factory
    @Override   
    public Button createPhone() {
        return new ApplePhone();
    }

    @Override
    public Checkbox createLaptop() {
        return new AppleLaptop();
    }
}

public class WindowsCompany implements Company {          // concrete factory
    @Override
    public Button createPhone() {
        return new WindowsPhone();
    }

    @Override
    public Checkbox createLaptop() {
        return new WindowsLaptop();
    }
}

public class Demo {                              // main class
    private static Application configureApplication() {
        Company company = new AppleCompany;
        Phone applePhone = company.createPhone();
        Laptop laptop = company.createLaptop(;)
    }
}
-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

APPLICABILITY:

- Use the Abstract Factory when your code needs to work with various families of related products, but you don’t want it to depend on the concrete classes of those 
products—they might be unknown beforehand or you simply want to allow for future extensibility.

The Abstract Factory provides you with an interface for creating objects from each class of the product family. As long as your code creates objects via this 
interface, you don’t have to worry about creating the wrong variant of a product which doesn’t match the products already created by your app.

- Consider implementing the Abstract Factory when you have a class with a set of Factory Methods that blur its primary responsibility.

In a well-designed program each class is responsible only for one thing. When a class deals with multiple product types, it may be worth extracting its factory 
methods into a stand-alone factory class or a full-blown Abstract Factory implementation.

HOW TO IMPLEMENT:

1. Map out a matrix of distinct product types versus variants of these products.

2. Declare abstract product interfaces(Phone, Laptop) for all product types. Then make all concrete product (WindowsLaptop, AppleLaptop) classes implement these 
interfaces.

3. Declare the abstract factory(Company) interface with a set of creation methods for all abstract products.

4. Implement a set of concrete factory(AppleCompany, WindowsCompany) classes, one for each product variant.

5. Create factory initialization code somewhere in the app. It should instantiate one of the concrete factory classes, depending on the application configuration 
or the current environment. Pass this factory object to all classes that construct products.

6. Scan through the code and find all direct calls to product constructors. Replace them with calls to the appropriate creation method on the factory object.
-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

RELATIONS WITH OTHER PATTERNS:

- Many designs start by using Factory Method (less complicated and more customizable via subclasses) and evolve toward Abstract Factory, Prototype, or Builder 
(more flexible, but more complicated).

- Builder focuses on constructing complex objects step by step. Abstract Factory specializes in creating families of related objects. Abstract Factory returns the 
product immediately, whereas Builder lets you run some additional construction steps before fetching the product.

- Abstract Factory classes are often based on a set of Factory Methods, but you can also use Prototype to compose the methods on these classes.

- Abstract Factory can serve as an alternative to Facade when you only want to hide the way the subsystem objects are created from the client code.

- You can use Abstract Factory along with Bridge. This pairing is useful when some abstractions defined by Bridge can only work with specific implementations. 
In this case, Abstract Factory can encapsulate these relations and hide the complexity from the client code.

- Abstract Factories, Builders and Prototypes can all be implemented as Singletons.